<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kotlin Chapter Five</title>
    <url>/2020/01/26/kotlin-chapter-five/</url>
    <content><![CDATA[<p>Kotlin学习笔记</p>
<h1 id="函数简化"><a href="#函数简化" class="headerlink" title="函数简化"></a>函数简化</h1><h2 id="使用-连接返回值"><a href="#使用-连接返回值" class="headerlink" title="使用 = 连接返回值"></a>使用 = 连接返回值</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun area(width: Int, height: Int): Int = width * height</span><br><span class="line">fun sayHi(name: String) = println(&quot;Hi &quot; + name)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun sayHi(name: String = &quot;world&quot;) = println(&quot;Hi &quot; + name)</span><br></pre></td></tr></table></figure>
<h2 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h2><p>在参数较多时用于指定参数具体是哪一个，方便阅读和查找<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sayHi(name = &quot;Ryan&quot;)</span><br></pre></td></tr></table></figure></p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val name = &quot;world&quot;</span><br><span class="line">println(&quot;Hi $name&quot;)</span><br><span class="line">println(&quot;Hi $&#123;name.length&#125;&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="raw-string-原生字符串"><a href="#raw-string-原生字符串" class="headerlink" title="raw string (原生字符串)"></a>raw string (原生字符串)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val name = &quot;world&quot;</span><br><span class="line">val myName = &quot;kotlin&quot;</span><br><span class="line">val text = &quot;&quot;&quot;</span><br><span class="line">      Hi $name!</span><br><span class="line">    My name is $myName.\n</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">println(text)</span><br><span class="line">//\n 并不会被转义,输出的内容与写的内容完全一致</span><br></pre></td></tr></table></figure>
<h1 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h1><h2 id="if-else"><a href="#if-else" class="headerlink" title="if/else"></a>if/else</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val max = if (a &gt; b) a else b</span><br><span class="line"></span><br><span class="line">val max = if (a &gt; b) &#123;</span><br><span class="line">    println(&quot;max:a&quot;)</span><br><span class="line">    a //返回 a</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    println(&quot;max:b&quot;)</span><br><span class="line">    b //返回 b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">when (x) &#123;</span><br><span class="line">    1 -&gt; &#123; println(&quot;1&quot;) &#125;</span><br><span class="line">    2 -&gt; &#123; println(&quot;2&quot;) &#125;</span><br><span class="line">    else -&gt; &#123; println(&quot;else&quot;) &#125;</span><br><span class="line">&#125;</span><br><span class="line">//when 也可以作为表达式进行使用</span><br><span class="line">val value: Int = when (x) &#123;</span><br><span class="line">    1 -&gt; &#123; x + 1 &#125;</span><br><span class="line">    2 -&gt; &#123; x * 2 &#125;</span><br><span class="line">    else -&gt; &#123; x + 5 &#125;</span><br><span class="line">&#125;</span><br><span class="line">//多重条件用，号隔开</span><br><span class="line">when (x) &#123;</span><br><span class="line">    1, 2 -&gt; print(&quot;x == 1 or x == 2&quot;)</span><br><span class="line">    else -&gt; print(&quot;else&quot;)</span><br><span class="line">&#125;</span><br><span class="line">//使用 in 检测是否在一个区间或者集合中</span><br><span class="line">when (x) &#123;</span><br><span class="line">    in 1..10 -&gt; print(&quot;x 在区间 1..10 中&quot;)</span><br><span class="line">    in listOf(1,2) -&gt; print(&quot;x 在集合中&quot;)</span><br><span class="line">    // not in</span><br><span class="line">    !in 10..20 -&gt; print(&quot;x 不在区间 10..20 中&quot;)</span><br><span class="line">    else -&gt; print(&quot;不在任何区间上&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用 is 进行特定类型的检测</span><br><span class="line">val isString = when(x) &#123;</span><br><span class="line">    is String -&gt; true</span><br><span class="line">    else -&gt; false</span><br><span class="line">&#125;</span><br><span class="line">//布尔表达式</span><br><span class="line">when &#123;</span><br><span class="line">    str1.contains(&quot;a&quot;) -&gt; print(&quot;字符串 str1 包含 a&quot;)</span><br><span class="line">    str2.length == 3 -&gt; print(&quot;字符串 str2 的长度为 3&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>使用for遍历<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val array = intArrayOf(1, 2, 3, 4)</span><br><span class="line">for (item in array) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (i in 0..10) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val a: Int? = try &#123; parseInt(input) &#125; catch (e: NumberFormatException) &#123; null &#125;</span><br></pre></td></tr></table></figure>
<h1 id="和"><a href="#和" class="headerlink" title="?. 和 ?:"></a>?. 和 ?:</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//使用？.表示可空数据，使用Elvis 操作符?:来表示结果为空返回：后面的数据</span><br><span class="line">val str: String? = &quot;Hello&quot;</span><br><span class="line">val length: Int = str?.length ?: -1</span><br><span class="line"></span><br><span class="line">fun validate(user: User) &#123;</span><br><span class="line">    val id = user.id ?: return //验证 user.id 是否为空，为空时 return </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="和-1"><a href="#和-1" class="headerlink" title="== 和 ==="></a>== 和 ===</h1><ul>
<li>== ：可以对基本数据类型以及 String 等类型进行内容比较，相当于 Java 中的 equals</li>
<li>=== ：对引用的内存地址进行比较，相当于 Java 中的 ==<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val str1 = &quot;123&quot;</span><br><span class="line">val str2 = &quot;123&quot;</span><br><span class="line">println(str1 == str2) //内容相等，输出：true</span><br><span class="line">​</span><br><span class="line">val str1= &quot;字符串&quot;</span><br><span class="line">val str2 = str1</span><br><span class="line">val str3 = str1</span><br><span class="line">print(str2 === str3) //引用地址相等，输出：true</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin Chapter Four</title>
    <url>/2020/01/26/kotlin-chapter-four/</url>
    <content><![CDATA[<p>Kotlin学习笔记</p>
<h1 id="数组和集合"><a href="#数组和集合" class="headerlink" title="数组和集合"></a>数组和集合</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val strs: Array&lt;String&gt; = arrayOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">val intArray = intArrayOf(1, 2, 3)</span><br></pre></td></tr></table></figure>
<p>可以看到 Kotlin 中的数组是一个拥有泛型的类<br>将数组泛型化有什么好处呢？对数组的操作可以像集合一样功能更强大，由于泛型化，Kotlin 可以给数组增加很多有用的工具函数：</p>
<ul>
<li>get() / set()</li>
<li>contains()</li>
<li>first()</li>
<li>find()<br>这样数组的实用性就大大增加了。<a id="more"></a>
<h3 id="取值和修改"><a href="#取值和修改" class="headerlink" title="取值和修改"></a>取值和修改</h3>Kotlin 中获取或者设置数组元素和 Java 一样，可以使用方括号加下标的方式索引：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">println(strs[0])</span><br><span class="line">strs[1] = &quot;B&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="不支持协变"><a href="#不支持协变" class="headerlink" title="不支持协变"></a>不支持协变</h3><p>Kotlin 的数组编译成字节码时使用的仍然是 Java 的数组，但在语言层面是泛型实现，这样会失去协变 (covariance) 特性，就是子类数组对象不能赋值给父类的数组变量：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val strs: Array&lt;String&gt; = arrayOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">val anys: Array&lt;Any&gt; = strs // compile-error: Type mismatch</span><br></pre></td></tr></table></figure></p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>Kotlin 和 Java 一样有三种集合类型：List、Set 和 Map，它们的含义分别如下：</p>
<ul>
<li><p>List 以固定顺序存储一组元素，元素可以重复。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val strList = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">val strList1 = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Set 存储一组互不相等的元素，通常没有固定顺序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val strSet = setOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Map 存储 键-值 对的数据集合，键互不相等，但不同的键可以对应相同的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val map = mapOf(&quot;key1&quot; to 1, &quot;key2&quot; to 2, &quot;key3&quot; to 3, &quot;key4&quot; to 3)</span><br><span class="line">//get() 根据键获取对应的值，还可以使用方括号的方式获取</span><br><span class="line">val value1 = map.get(&quot;key1&quot;)</span><br><span class="line">val value2 = map[&quot;key2&quot;]</span><br><span class="line">//用方括号的方式改变 Map 中键对应的值</span><br><span class="line">map.put(&quot;key1&quot;, 2)</span><br><span class="line">map[&quot;key1&quot;] = 2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="可变集合-不可变集合"><a href="#可变集合-不可变集合" class="headerlink" title="可变集合/不可变集合"></a>可变集合/不可变集合</h3><p>上面修改 Map 值的例子中，创建函数用的是 mutableMapOf() 而不是 mapOf()，因为只有 mutableMapOf() 创建的 Map 才可以修改。Kotlin 中集合分为两种类型：只读的和可变的。这里的只读有两层意思：<br>集合的 size 不可变<br>集合中的元素值不可变<br>以下是三种集合类型创建不可变和可变实例的例子：<br>listOf() 创建不可变的 List，mutableListOf() 创建可变的 List。<br>setOf() 创建不可变的 Set，mutableSetOf() 创建可变的 Set。<br>mapOf() 创建不可变的 Map，mutableMapOf() 创建可变的 Map。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val strList = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">//不可变的可以通过 toMutable*() 系函数转换成可变的集合</span><br><span class="line">strList.toMutableList()</span><br><span class="line"></span><br><span class="line">val strSet = setOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">strSet.toMutableSet()</span><br><span class="line"></span><br><span class="line">val map = mapOf(&quot;key1&quot; to 1, &quot;key2&quot; to 2, &quot;key3&quot; to 3, &quot;key4&quot; to 3)</span><br><span class="line">map.toMutableMap()</span><br></pre></td></tr></table></figure></p>
<h3 id="Sequence"><a href="#Sequence" class="headerlink" title="Sequence"></a>Sequence</h3><p>Kotlin引入了一个新的容器类型 Sequence，它和 Iterable 一样用来遍历一组数据并可以对每个元素进行特定的处理，先来看看如何创建一个 Sequence<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sequenceOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line"></span><br><span class="line">val list = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">list.asSequence()</span><br><span class="line"></span><br><span class="line">//使用 lambda 表达式创建</span><br><span class="line">val sequence = generateSequence(0) &#123; it + 1 &#125;</span><br><span class="line">//lambda 表达式，负责生成第二个及以后的元素，it 表示前一个元素</span><br></pre></td></tr></table></figure></p>
<p>Sequence 又被称为「惰性集合操作」<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val sequence = sequenceOf(1, 2, 3, 4)</span><br><span class="line">val result: List = sequence</span><br><span class="line">    .map &#123; i -&gt;</span><br><span class="line">        println(&quot;Map $i&quot;)</span><br><span class="line">        i * 2 </span><br><span class="line">    &#125;</span><br><span class="line">    .filter &#123; i -&gt;</span><br><span class="line">        println(&quot;Filter $i&quot;)</span><br><span class="line">        i % 3  == 0 </span><br><span class="line">    &#125;</span><br><span class="line">println(result.first()) // 只取集合的第一个元素</span><br><span class="line">//惰性指当出现满足条件的第一个元素的时候，Sequence 就不会执行后面的元素遍历了，即跳过了 4 的遍历。</span><br></pre></td></tr></table></figure></p>
<h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p>Range 表示区间的意思，也就是范围，IntRange、CharRange以及LongRange<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//闭区间 [0, 1000]</span><br><span class="line">val range: IntRange = 0..1000</span><br><span class="line">for (i in range) &#123;</span><br><span class="line">    print(&quot;$i, &quot;)</span><br><span class="line">&#125;</span><br><span class="line">//步长为 2</span><br><span class="line">for (i in range step 2) &#123;</span><br><span class="line">    print(&quot;$i, &quot;)</span><br><span class="line">&#125;</span><br><span class="line">//递减区间</span><br><span class="line">for (i in 4 downTo 1) &#123;</span><br><span class="line">    print(&quot;$i, &quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//半开区间 [0, 1000)</span><br><span class="line">val range: IntRange = 0 until 1000</span><br></pre></td></tr></table></figure></p>
<h2 id="数组与集合的操作符"><a href="#数组与集合的操作符" class="headerlink" title="数组与集合的操作符"></a>数组与集合的操作符</h2><ul>
<li><p>forEach：遍历每一个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//lambda 表达式遍历数组，i 表示数组的每个元素</span><br><span class="line">intArray.forEach &#123; i -&gt;</span><br><span class="line">    print(i + &quot; &quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>filter：对每个元素进行过滤操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val newList: List = intArray.filter &#123; i -&gt;</span><br><span class="line">    i != 1 // 过滤掉数组中等于 1 的元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>map：遍历每个元素并执行给定表达式，最终形成新的集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val newList: List = intArray.map &#123; i -&gt;</span><br><span class="line">    i + 1 // 每个元素加 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>flatMap：遍历每个元素，并为每个元素创建新的集合，最后合并到一个集合中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intArray.flatMap &#123; i -&gt;</span><br><span class="line">    listOf(&quot;$&#123;i + 1&#125;&quot;, &quot;a&quot;) // 生成新集合</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin Chapter Three</title>
    <url>/2020/01/26/kotlin-chapter-three/</url>
    <content><![CDATA[<p>Kotlin学习笔记</p>
<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//主构造器 primary constructor</span><br><span class="line">//constructor 构造器移到了类名之后,类的属性 name 可以引用构造器中的参数name</span><br><span class="line">class User constructor(name: String) &#123;</span><br><span class="line">    var name: String = name</span><br><span class="line"></span><br><span class="line">    init &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//次构造器</span><br><span class="line">class User &#123;</span><br><span class="line">    val name: String</span><br><span class="line">    constructor(name: String) &#123;</span><br><span class="line">        //没有 public</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//如果类中有主构造器，那么其他的次构造器都需要通过 this 关键字调用主构造器</span><br><span class="line">class User constructor(var name: String) &#123; </span><br><span class="line">    constructor(name: String, id: Int) : this(name) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    constructor(name: String, id: Int, age: Int) : this(name, id) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通常情况下，主构造器中的 constructor 关键字可以省略：</span><br><span class="line">class User(name: String) &#123;</span><br><span class="line">    var name: String = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在构造器中直接声明属性</span><br><span class="line">class User(var name: String) &#123;</span><br><span class="line">&#125;</span><br><span class="line">// 等价于：</span><br><span class="line">class User(name: String) &#123;</span><br><span class="line">  var name: String = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>Kotlin 中使用 constructor 表示。</li>
<li>Kotlin 中构造器没有 public 修饰，因为默认可见性就是公开的。</li>
</ul>
<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">    init &#123;</span><br><span class="line">        // 初始化代码块，先于构造器执行</span><br><span class="line">    &#125;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="val"><a href="#val" class="headerlink" title="val"></a>val</h2><p>类似Java中的final,定义只读变量<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val fina1 = 1</span><br><span class="line">    // 参数是没有 val 的，默认为常量</span><br><span class="line">fun method(final2: String) &#123;</span><br><span class="line">    val final3 = &quot;The parameter is &quot; + final2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="val自定义-getter"><a href="#val自定义-getter" class="headerlink" title="val自定义 getter"></a>val自定义 getter</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val size: Int</span><br><span class="line">    get() &#123; // 每次获取 size 值时都会执行 items.size</span><br><span class="line">        return items.size</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>创建一个类，并且创建一个这个类的对象,即为单例<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">object Sample &#123;</span><br><span class="line">    val name = &quot;A name&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在代码中如果要使用这个对象，直接通过它的类名就可以访问：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sample.name</span><br></pre></td></tr></table></figure></p>
<p>这种通过 object 实现的单例是一个饿汉式的单例，并且实现了线程安全。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//使用object创建匿名内部类</span><br><span class="line">val listener = object: ViewPager.SimpleOnPageChangeListener() &#123;</span><br><span class="line">    override fun onPageSelected(position: Int) &#123;</span><br><span class="line">        // override</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="companion-object"><a href="#companion-object" class="headerlink" title="companion object"></a>companion object</h2><p>companion 可以理解为伴随、伴生，表示修饰的对象和外部类绑定，const用来定义常量，在内部直接使用变量名访问<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    companion object &#123;</span><br><span class="line">        const val TAG: String = &quot;TAG&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h2><p>Java 中的 Object 在 Kotlin 中变成了 Any，和 Object 作用一样：作为所有类的基类。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Sysui plugin</title>
    <url>/2020/01/20/sysui-plugin/</url>
    <content><![CDATA[<h1 id="SystemUI-plugins机制介绍"><a href="#SystemUI-plugins机制介绍" class="headerlink" title="SystemUI plugins机制介绍"></a>SystemUI plugins机制介绍</h1><p>插件是包含可以动态加载到SystemUI中的代码和资源的APK，插件提供了一种快速创建SystemUI功能的简便方法，通过创建插件来实现SysUI中已经定义的基本接口集，从而在运行时更改SystemUI的行为，由接口控制的代码可以更快的迭代。<br><a id="more"></a></p>
<h1 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h1><p>下图显示了插件编译/加载流程的工作原理<br><img src="/2020/01/20/sysui-plugin/sysui-plugins.png" alt="Sysui plugins 解析(以SampleOverlayPlugin为例)"></p>
<h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><p>vendor\tran_os\packages\apps\SystemUI\plugin\ExamplePlugin\src\com\android\systemui\plugin\testoverlayplugin\ 插件目录，生成插件apk，sysui接口实现</p>
<p>vendor\tran_os\packages\apps\SystemUI\plugin\src\com\android\systemui\plugins\  功能接口定义</p>
<p>vendor\tran_os\packages\apps\SystemUI\plugin_core\  基础接口定义</p>
<p>vendor\tran_os\packages\apps\SystemUI\shared\src\com\android\systemui\shared\plugins\   plugin运行模块，主要负责插件加载，管理等</p>
<h1 id="SampleOverlayPlugin加载流程解析"><a href="#SampleOverlayPlugin加载流程解析" class="headerlink" title="SampleOverlayPlugin加载流程解析"></a>SampleOverlayPlugin加载流程解析</h1><h2 id="触发加载插件"><a href="#触发加载插件" class="headerlink" title="触发加载插件"></a>触发加载插件</h2><p>vendor\tran_os\packages\apps\SystemUI\src\com\android\systemui\SystemUIApplication.java<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dependency.get(PluginManager.class).addPluginListener(</span><br><span class="line">                new PluginListener&lt;OverlayPlugin&gt;() &#123;</span><br><span class="line">                    private ArraySet&lt;OverlayPlugin&gt; mOverlays = new ArraySet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onPluginConnected(OverlayPlugin plugin, Context pluginContext) &#123;</span><br><span class="line">                        mainHandler.post(new Runnable() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void run() &#123;</span><br><span class="line">                                StatusBar statusBar = getComponent(StatusBar.class);</span><br><span class="line">                                if (statusBar != null) &#123;</span><br><span class="line">                                    plugin.setup(statusBar.getStatusBarWindow(),</span><br><span class="line">                                            statusBar.getNavigationBarView(), new Callback(plugin));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onPluginDisconnected(OverlayPlugin plugin) &#123;</span><br><span class="line">                        mainHandler.post(new Runnable() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void run() &#123;</span><br><span class="line">                                mOverlays.remove(plugin);</span><br><span class="line">                                Dependency.get(StatusBarWindowController.class).setForcePluginOpen(</span><br><span class="line">                                        mOverlays.size() != 0);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    class Callback implements OverlayPlugin.Callback &#123;</span><br><span class="line">                        private final OverlayPlugin mPlugin;</span><br><span class="line"></span><br><span class="line">                        Callback(OverlayPlugin plugin) &#123;</span><br><span class="line">                            mPlugin = plugin;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        @Override</span><br><span class="line">                        public void onHoldStatusBarOpenChange() &#123;</span><br><span class="line">                            if (mPlugin.holdStatusBarOpen()) &#123;</span><br><span class="line">                                mOverlays.add(mPlugin);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                mOverlays.remove(mPlugin);</span><br><span class="line">                            &#125;</span><br><span class="line">                            mainHandler.post(new Runnable() &#123;</span><br><span class="line">                                @Override</span><br><span class="line">                                public void run() &#123;</span><br><span class="line">                                    Dependency.get(StatusBarWindowController.class)</span><br><span class="line">                                            .setStateListener(b -&gt; mOverlays.forEach(</span><br><span class="line">                                                    o -&gt; o.setCollapseDesired(b)));</span><br><span class="line">                                    Dependency.get(StatusBarWindowController.class)</span><br><span class="line">                                            .setForcePluginOpen(mOverlays.size() != 0);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, OverlayPlugin.class, true /* Allow multiple plugins */);</span><br></pre></td></tr></table></figure></p>
<p>Dependency.get(PluginManager.class)得到的是PluginManagerImpl对象，调用了void addPluginListener(PluginListener<t> listener, Class&lt;?&gt; cls,<br>boolean allowMultiple)方法，实际调用到addPluginListener(String action, PluginListener<t> listener,<br>Class cls, boolean allowMultiple)方法</t></t></p>
<p>通过PluginManagerImpl将寻找OverlayPlugin的实现，绑定后同过OverlayPlugin定义好的接口去调用SampleOverlayPlugin的实现功能，下面我们一步步看如何寻找到接口OverlayPlugin的实现</p>
<h2 id="addPluginListener"><a href="#addPluginListener" class="headerlink" title="addPluginListener"></a>addPluginListener</h2><p>vendor\tran_os\packages\apps\SystemUI\shared\src\com\android\systemui\shared\plugins\PluginManagerImpl.java<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public &lt;T extends Plugin&gt; void addPluginListener(String action, PluginListener&lt;T&gt; listener,</span><br><span class="line">        Class cls, boolean allowMultiple) &#123;</span><br><span class="line">    mPluginPrefs.addAction(action);</span><br><span class="line">    PluginInstanceManager p = mFactory.createPluginInstanceManager(mContext, action, listener,</span><br><span class="line">            allowMultiple, mLooper, cls, this);</span><br><span class="line">    p.loadAll();</span><br><span class="line">    mPluginMap.put(listener, p);</span><br><span class="line">    startListening();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中action是通过PluginManager.Helper.getAction(cls)获取的<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static &lt;P&gt; String getAction(Class&lt;P&gt; cls) &#123;</span><br><span class="line">    ProvidesInterface info = cls.getDeclaredAnnotation(ProvidesInterface.class);</span><br><span class="line">    if (info == null) &#123;</span><br><span class="line">        throw new RuntimeException(cls + &quot; doesn&apos;t provide an interface&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (TextUtils.isEmpty(info.action())) &#123;</span><br><span class="line">        throw new RuntimeException(cls + &quot; doesn&apos;t provide an action&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return info.action();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>getDeclaredAnnotation通过注解获取OverlayPlugin的ACTION<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ProvidesInterface(action = OverlayPlugin.ACTION, version = OverlayPlugin.VERSION)</span><br><span class="line">public interface OverlayPlugin extends Plugin &#123;</span><br></pre></td></tr></table></figure></p>
<p>主要看一下loadAll方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void loadAll() &#123;</span><br><span class="line">    if (DEBUG) Log.d(TAG, &quot;startListening&quot;);</span><br><span class="line">    mPluginHandler.sendEmptyMessage(PluginHandler.QUERY_ALL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void handleMessage(Message msg) &#123;</span><br><span class="line">        switch (msg.what) &#123;</span><br><span class="line">            case QUERY_ALL:</span><br><span class="line">                if (DEBUG) Log.d(TAG, &quot;queryAll &quot; + mAction);</span><br><span class="line">                for (int i = mPlugins.size() - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">                    PluginInfo&lt;T&gt; plugin = mPlugins.get(i);</span><br><span class="line">                    mListener.onPluginDisconnected(plugin.mPlugin);</span><br><span class="line">                    if (!(plugin.mPlugin instanceof PluginFragment)) &#123;</span><br><span class="line">                        // Only call onDestroy for plugins that aren&apos;t fragments, as fragments</span><br><span class="line">                        // will get the onDestroy as part of the fragment lifecycle.</span><br><span class="line">                        plugin.mPlugin.onDestroy();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                mPlugins.clear();</span><br><span class="line">                handleQueryPlugins(null);</span><br><span class="line">                break;</span><br><span class="line"></span><br><span class="line">private void handleQueryPlugins(String pkgName) &#123;</span><br><span class="line">        // This isn&apos;t actually a service and shouldn&apos;t ever be started, but is</span><br><span class="line">        // a convenient PM based way to manage our plugins.</span><br><span class="line">        Intent intent = new Intent(mAction);</span><br><span class="line">        if (pkgName != null) &#123;</span><br><span class="line">            intent.setPackage(pkgName);</span><br><span class="line">        &#125;</span><br><span class="line">        // plugin在AndroidManifest中必须声明为&lt;service&gt;，packageManager读取到所有的service信息</span><br><span class="line">        List&lt;ResolveInfo&gt; result = mPm.queryIntentServices(intent, 0);</span><br><span class="line">        if (DEBUG) Log.d(TAG, &quot;Found &quot; + result.size() + &quot; plugins&quot;);</span><br><span class="line">        if (result.size() &gt; 1 &amp;&amp; !mAllowMultiple) &#123;</span><br><span class="line">            // TODO: Show warning.</span><br><span class="line">            Log.w(TAG, &quot;Multiple plugins found for &quot; + mAction);</span><br><span class="line">            if (DEBUG) &#123;</span><br><span class="line">                for (ResolveInfo info : result) &#123;</span><br><span class="line">                    ComponentName name = new ComponentName(info.serviceInfo.packageName,</span><br><span class="line">                            info.serviceInfo.name);</span><br><span class="line">                    Log.w(TAG, &quot;  &quot; + name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for (ResolveInfo info : result) &#123;</span><br><span class="line">            ComponentName name = new ComponentName(info.serviceInfo.packageName,</span><br><span class="line">                    info.serviceInfo.name);</span><br><span class="line">            PluginInfo&lt;T&gt; t = handleLoadPlugin(name);</span><br><span class="line">            if (t == null) continue;</span><br><span class="line"></span><br><span class="line">            // add plugin before sending PLUGIN_CONNECTED message</span><br><span class="line">            mPlugins.add(t);</span><br><span class="line">            mMainHandler.obtainMessage(mMainHandler.PLUGIN_CONNECTED, t).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected PluginInfo&lt;T&gt; handleLoadPlugin(ComponentName component) &#123;</span><br><span class="line">        // This was already checked, but do it again here to make extra extra sure, we don&apos;t</span><br><span class="line">        // use these on production builds.</span><br><span class="line">        if (!isDebuggable &amp;&amp; !isPluginWhitelisted(component)) &#123;</span><br><span class="line">            // Never ever ever allow these on production builds, they are only for prototyping.</span><br><span class="line">            Log.w(TAG, &quot;Plugin cannot be loaded on production build: &quot; + component);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!mManager.getPluginEnabler().isEnabled(component)) &#123;</span><br><span class="line">            if (DEBUG) Log.d(TAG, &quot;Plugin is not enabled, aborting load: &quot; + component);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        String pkg = component.getPackageName();</span><br><span class="line">        String cls = component.getClassName();</span><br><span class="line">        try &#123;</span><br><span class="line">            ApplicationInfo info = mPm.getApplicationInfo(pkg, 0);</span><br><span class="line">            // TODO: This probably isn&apos;t needed given that we don&apos;t have IGNORE_SECURITY on</span><br><span class="line">            // 此处检查设置的权限</span><br><span class="line">            if (mPm.checkPermission(PLUGIN_PERMISSION, pkg)</span><br><span class="line">                    != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                Log.d(TAG, &quot;Plugin doesn&apos;t have permission: &quot; + pkg);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            // Create our own ClassLoader so we can use our own code as the parent.</span><br><span class="line">            ClassLoader classLoader = mManager.getClassLoader(info);</span><br><span class="line">            Context pluginContext = new PluginContextWrapper(</span><br><span class="line">                    mContext.createApplicationContext(info, 0), classLoader);</span><br><span class="line">            Class&lt;?&gt; pluginClass = Class.forName(cls, true, classLoader);</span><br><span class="line">            // TODO: Only create the plugin before version check if we need it for</span><br><span class="line">            // legacy version check.</span><br><span class="line">            T plugin = (T) pluginClass.newInstance();</span><br><span class="line">            try &#123;</span><br><span class="line">                VersionInfo version = checkVersion(pluginClass, plugin, mVersion);</span><br><span class="line">                if (DEBUG) Log.d(TAG, &quot;createPlugin&quot;);</span><br><span class="line">                return new PluginInfo(pkg, cls, plugin, pluginContext, version);</span><br><span class="line">            &#125; catch (InvalidVersionException e) &#123;</span><br><span class="line">                final int icon = mContext.getResources().getIdentifier(&quot;tuner&quot;, &quot;drawable&quot;,</span><br><span class="line">                        mContext.getPackageName());</span><br><span class="line">                final int color = Resources.getSystem().getIdentifier(</span><br><span class="line">                        &quot;system_notification_accent_color&quot;, &quot;color&quot;, &quot;android&quot;);</span><br><span class="line">                final Notification.Builder nb = new Notification.Builder(mContext,</span><br><span class="line">                        PluginManager.NOTIFICATION_CHANNEL_ID)</span><br><span class="line">                                .setStyle(new Notification.BigTextStyle())</span><br><span class="line">                                .setSmallIcon(icon)</span><br><span class="line">                                .setWhen(0)</span><br><span class="line">                                .setShowWhen(false)</span><br><span class="line">                                .setVisibility(Notification.VISIBILITY_PUBLIC)</span><br><span class="line">                                .setColor(mContext.getColor(color));</span><br><span class="line">                String label = cls;</span><br><span class="line">                try &#123;</span><br><span class="line">                    label = mPm.getServiceInfo(component, 0).loadLabel(mPm).toString();</span><br><span class="line">                &#125; catch (NameNotFoundException e2) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                if (!e.isTooNew()) &#123;</span><br><span class="line">                    // Localization not required as this will never ever appear in a user build.</span><br><span class="line">                    nb.setContentTitle(&quot;Plugin \&quot;&quot; + label + &quot;\&quot; is too old&quot;)</span><br><span class="line">                            .setContentText(&quot;Contact plugin developer to get an updated&quot;</span><br><span class="line">                                    + &quot; version.\n&quot; + e.getMessage());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // Localization not required as this will never ever appear in a user build.</span><br><span class="line">                    nb.setContentTitle(&quot;Plugin \&quot;&quot; + label + &quot;\&quot; is too new&quot;)</span><br><span class="line">                            .setContentText(&quot;Check to see if an OTA is available.\n&quot;</span><br><span class="line">                                    + e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                Intent i = new Intent(PluginManagerImpl.DISABLE_PLUGIN).setData(</span><br><span class="line">                        Uri.parse(&quot;package://&quot; + component.flattenToString()));</span><br><span class="line">                PendingIntent pi = PendingIntent.getBroadcast(mContext, 0, i, 0);</span><br><span class="line">                nb.addAction(new Action.Builder(null, &quot;Disable plugin&quot;, pi).build());</span><br><span class="line">                mContext.getSystemService(NotificationManager.class)</span><br><span class="line">                        .notifyAsUser(cls, SystemMessage.NOTE_PLUGIN, nb.build(),</span><br><span class="line">                                UserHandle.ALL);</span><br><span class="line">                // TODO: Warn user.</span><br><span class="line">                Log.w(TAG, &quot;Plugin has invalid interface version &quot; + plugin.getVersion()</span><br><span class="line">                        + &quot;, expected &quot; + mVersion);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            Log.w(TAG, &quot;Couldn&apos;t load plugin: &quot; + pkg, e);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   case PLUGIN_CONNECTED:</span><br><span class="line">      if (DEBUG) Log.d(TAG, &quot;onPluginConnected&quot;);</span><br><span class="line">      PluginPrefs.setHasPlugins(mContext);</span><br><span class="line">      PluginInfo&lt;T&gt; info = (PluginInfo&lt;T&gt;) msg.obj;</span><br><span class="line">      mManager.handleWtfs();</span><br><span class="line">      if (!(msg.obj instanceof PluginFragment)) &#123;</span><br><span class="line">       // Only call onDestroy for plugins that aren&apos;t fragments, as fragments</span><br><span class="line">       // will get the onCreate as part of the fragment lifecycle.</span><br><span class="line">       info.mPlugin.onCreate(mContext, info.mPluginContext);</span><br><span class="line">     &#125;</span><br><span class="line">     mListener.onPluginConnected(info.mPlugin, info.mPluginContext);</span><br></pre></td></tr></table></figure></p>
<p>查看plugin的service定义，定义的action要与接口OverlayPlugin中定义的一致，PackageManager通过此action查询到plugin<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vendor\tran_os\packages\apps\SystemUI\plugin\ExamplePlugin\AndroidManifest.xml</span><br><span class="line">&lt;service android:name=&quot;.SampleOverlayPlugin&quot;</span><br><span class="line">         android:label=&quot;@string/plugin_label&quot;&gt;</span><br><span class="line">      &lt;intent-filter&gt;</span><br><span class="line">             &lt;action android:name=&quot;com.android.systemui.action.PLUGIN_OVERLAY&quot; /&gt;</span><br><span class="line">      &lt;/intent-filter&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure></p>
<p>之后通过PathClassLoader加载类，PathClassLoader只能用于加载已安装过的apk的dex<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ClassLoader getParentClassLoader() &#123;</span><br><span class="line">    if (mParentClassLoader == null) &#123;</span><br><span class="line">        // Lazily load this so it doesn&apos;t have any effect on devices without plugins.</span><br><span class="line">        mParentClassLoader = new ClassLoaderFilter(getClass().getClassLoader(),</span><br><span class="line">                &quot;com.android.systemui.plugin&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return mParentClassLoader;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Returns class loader specific for the given plugin. */</span><br><span class="line">public ClassLoader getClassLoader(ApplicationInfo appInfo) &#123;</span><br><span class="line">    if (!isDebuggable &amp;&amp; !isPluginPackageWhitelisted(appInfo.packageName)) &#123;</span><br><span class="line">        Log.w(TAG, &quot;Cannot get class loader for non-whitelisted plugin. Src:&quot;</span><br><span class="line">                + appInfo.sourceDir + &quot;, pkg: &quot; + appInfo.packageName);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    if (mClassLoaders.containsKey(appInfo.packageName)) &#123;</span><br><span class="line">        return mClassLoaders.get(appInfo.packageName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; zipPaths = new ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; libPaths = new ArrayList&lt;&gt;();</span><br><span class="line">    LoadedApk.makePaths(null, true, appInfo, zipPaths, libPaths);</span><br><span class="line">    ClassLoader classLoader = new PathClassLoader(</span><br><span class="line">            TextUtils.join(File.pathSeparator, zipPaths),</span><br><span class="line">            TextUtils.join(File.pathSeparator, libPaths),</span><br><span class="line">            getParentClassLoader());</span><br><span class="line">    mClassLoaders.put(appInfo.packageName, classLoader);</span><br><span class="line">    return classLoader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>至此通过classLoader加载plugin类赋值到PluginInfo,然后发送PLUGIN_CONNECTED消息，调用到mListener.onPluginConnected，回到第一步addPluginListener-》PluginListener，调用plugin.setup，此plugin已经是SampleOverlayPlugin apk中的实现，从而完成布局加载</p>
<h1 id="类图结构"><a href="#类图结构" class="headerlink" title="类图结构"></a>类图结构</h1><p><img src="/2020/01/20/sysui-plugin/class-structure.png" alt="Sysui plugins 解析(以SampleOverlayPlugin为例)"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SystemUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin Chapter Two</title>
    <url>/2020/01/19/kotlin-chapter-two/</url>
    <content><![CDATA[<p>Kotlin学习笔记</p>
<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>首先是类的可见性，Java 中的 public 在 Kotlin 中可以省略，Kotlin 的类默认是 public 的。</li>
<li>类的继承的写法，Java 里用的是 extends，而在 Kotlin 里使用 :，但其实 : 不仅可以表示继承，还可以表示 Java 中的 implement<a id="more"></a>
Kotlin 里我们注意到 AppCompatActivity 后面的 ()，这其实也是一种省略的写法，等价于：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MainActivity constructor() : AppCompatActivity() &#123;</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line">// 注意这里 AppCompatActivity 后面没有 &apos;()&apos;</span><br><span class="line">class MainActivity : AppCompatActivity &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Kotlin 把构造函数单独用了一个 constructor 关键字来和其他的 fun 做区分。</p>
<p>override 的不同</p>
<ul>
<li>Java 里面 @Override 是注解的形式。</li>
<li>Kotlin 里的 override 变成了关键字。</li>
<li>Kotlin 省略了 protected 关键字，也就是说，Kotlin 里的 override 函数的可见性是继承自父类的。</li>
</ul>
<p>除了以上这些明显的不同之外，还有一些不同点从上面的代码里看不出来，但当你写一个类去继承 MainActivity 时就会发现：<br>Kotlin 里的 MainActivity 无法继承：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 写法会报错，This type is final, so it cannot be inherited from</span><br><span class="line">class NewActivity: MainActivity() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原因是 Kotlin 里的类默认是 final 的，而 Java 里只有加了 final 关键字的类才是 final 的。<br>那么有什么办法解除 final 限制么？我们可以使用 open 来做这件事：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open class MainActivity : AppCompatActivity() &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样一来，我们就可以继承了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class NewActivity: MainActivity() &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是要注意，此时 NewActivity 仍然是 final 的，也就是说，open 没有父类到子类的遗传性。<br>而刚才说到的 override 是有遗传性的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class NewActivity : MainActivity() &#123;</span><br><span class="line">    // onCreate 仍然是 override 的</span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果要关闭 override 的遗传性，只需要这样即可：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open class MainActivity : AppCompatActivity() &#123;</span><br><span class="line">    // 加 final 关键字，作用和 Java 里面一样，关闭了 override 的遗传性</span><br><span class="line">    final override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="类型的判断和强转"><a href="#类型的判断和强转" class="headerlink" title="类型的判断和强转"></a>类型的判断和强转</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line">    var activity: Activity = NewActivity()</span><br><span class="line">    if (activity is NewActivity) &#123;</span><br><span class="line">        // 强转由于类型推断被省略了</span><br><span class="line">        activity.action()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//使用as关键字来强转</span><br><span class="line">fun main() &#123;</span><br><span class="line">    var activity: Activity = NewActivity()</span><br><span class="line">    (activity as NewActivity).action()</span><br><span class="line">&#125;</span><br><span class="line">//使用as?来避免空对象，避免报错</span><br><span class="line">fun main() &#123;</span><br><span class="line">    var activity: Activity = NewActivity()</span><br><span class="line">    // (activity as? NewActivity)&apos; 之后是一个可空类型的对象，所以，需要使用 &apos;?.&apos; 来调用</span><br><span class="line">    (activity as? NewActivity)?.action()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo notes</title>
    <url>/2020/01/18/hexo-notes/</url>
    <content><![CDATA[<p>Hexo常用命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init [folder]  //新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</span><br><span class="line">hexo server         //启动服务器。默认情况下，访问网址为： http://localhost:4000/。</span><br><span class="line">hexo g              //生成html文件</span><br><span class="line">hexo clean          //清空生成文件</span><br><span class="line">hexo new [layout] &lt;title&gt;  //新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。</span><br><span class="line">                           //如果标题包含空格的话，请使用引号括起来。</span><br><span class="line">hexo new &quot;post title with whitespace&quot;</span><br><span class="line">hexo d            //部署之前预先生成静态文件</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin Get Started</title>
    <url>/2020/01/18/kotlin-get-started/</url>
    <content><![CDATA[<p>Kotlin学习笔记</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的声明与赋值"><a href="#变量的声明与赋值" class="headerlink" title="变量的声明与赋值"></a>变量的声明与赋值</h2><p>kotlin 里声明一个变量的格式是这样的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var v: View</span><br></pre></td></tr></table></figure></p>
<p>注意以下几点：</p>
<ul>
<li>有一个 var 关键字</li>
<li>变量名在前，类型在后</li>
<li>中间是用冒号分隔的</li>
<li>结尾没有分号（对，Kotlin 里面不需要分号）<a id="more"></a>
<h2 id="Kotlin-的空安全设计"><a href="#Kotlin-的空安全设计" class="headerlink" title="Kotlin 的空安全设计"></a>Kotlin 的空安全设计</h2>简单来说就是通过 IDE 的提示来避免调用 null 对象，从而避免 NullPointerException。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var view: View = null</span><br><span class="line">// IDE 会提示错误，Null can not be a value of a non-null type View</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>使用？来表示可空，这种类型之后加 ? 的写法，在 Kotlin 里叫可空类型。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">    var name: String? = null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">view?.setBackgroundColor(Color.RED)  //使用？来避免NullPointerException，如果view为空即不会执行setBackgroundColor</span><br><span class="line">view!!.setBackgroundColor(Color.RED) //使用！！来做非空断言，即开发者确保view不为空，编译器不需要检查，如果出现空的情况，运行就会抛出异常</span><br></pre></td></tr></table></figure></p>
<h2 id="延迟初始化"><a href="#延迟初始化" class="headerlink" title="延迟初始化"></a>延迟初始化</h2><p>在开始无法初始化的对象，Kotlin提供了延迟初始化关键字lateinit<br>这个 lateinit 的意思是：告诉编译器我没法第一时间就初始化，但我肯定会在使用它之前完成初始化的。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lateinit var view: View</span><br><span class="line">override fun onCreate(...) &#123;</span><br><span class="line">    ...</span><br><span class="line">    view = findViewById(R.id.tvContent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var name: String = &quot;Mike&quot;</span><br><span class="line">var name = &quot;Mike&quot;</span><br></pre></td></tr></table></figure>
<h2 id="val-和-var"><a href="#val-和-var" class="headerlink" title="val 和 var"></a>val 和 var</h2><p>val 和 Java 中的 final 类似，称为只读变量。它只能赋值一次，不能修改。而 var 是一种可读可写变量。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val size = 18</span><br></pre></td></tr></table></figure></p>
<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>在 Kotlin 里变量默认是 public 的，其他与Java类似</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Kotlin 除了变量声明外，函数的声明方式也和 Java 的方法不一样。Java 的方法（method）在 Kotlin 里叫函数（function），其实没啥区别，或者说其中的区别我们可以忽略掉。对任何编程语言来讲，变量就是用来存储数据，而函数就是用来处理数据。</p>
<h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun cook(name: String): Food &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>以 fun 关键字开头</li>
<li>返回值写在了函数和参数后面，如果没有返回值，写作Unit，并且可以省略</li>
</ul>
<h2 id="可见性-1"><a href="#可见性-1" class="headerlink" title="可见性"></a>可见性</h2><p>函数如果不加可见性修饰符的话，默认的可见范围和变量一样也是 public 的</p>
<h2 id="属性的-getter-setter-函数"><a href="#属性的-getter-setter-函数" class="headerlink" title="属性的 getter/setter 函数"></a>属性的 getter/setter 函数</h2><p>我们知道，在 Java 里面的 field 经常会带有 getter/setter 函数<br>在 Kotlin 里，这种 getter / setter 是怎么运作的呢？<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">    var name = &quot;Mike&quot;</span><br><span class="line">        get() &#123;</span><br><span class="line">            return field + &quot; nb&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        set(value) &#123;</span><br><span class="line">            field = &quot;Cute &quot; + value</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>在 Kotlin 中，所有东西都是对象，Kotlin 中使用的基本类型有：数字、字符、布尔值、数组与字符串。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var number: Int = 1 // 还有 Double Float Long Short Byte 都类似</span><br><span class="line">var c: Char = &apos;c&apos;</span><br><span class="line">var b: Boolean = true</span><br><span class="line">var array: IntArray = intArrayOf(1, 2) // 类似的还有 FloatArray DoubleArray CharArray 等，intArrayOf 是 Kotlin 的 built-in 函数</span><br><span class="line">var str: String = &quot;string&quot;</span><br></pre></td></tr></table></figure></p>
<p>这里有两个地方和 Java 不太一样：<br>Kotlin 里的 Int 和 Java 里的 int 以及 Integer 不同，主要是在装箱方面不同。<br>Java 里的 int 是 unbox 的，而 Integer 是 box 的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a = 1;</span><br><span class="line">Integer b = 2; // 被自动装箱 autoboxing</span><br><span class="line">Kotlin 里，Int 是否装箱根据场合来定：</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a: Int = 1 // unbox</span><br><span class="line">var b: Int? = 2 // box</span><br><span class="line">var list: List&lt;Int&gt; = listOf(1, 2) // box</span><br></pre></td></tr></table></figure>
<p>Kotlin 在语言层面简化了 Java 中的 int 和 Integer，但是我们对是否装箱的场景还是要有一个概念，因为这个牵涉到程序运行时的性能开销。<br>因此在日常的使用中，对于 Int 这样的基本类型，尽量用不可空变量。<br>Java 中的数组和 Kotlin 中的数组的写法也有区别：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] array = new int[] &#123;1, 2&#125;;</span><br></pre></td></tr></table></figure></p>
<p>而在 Kotlin 里，上面的写法是这样的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var array: IntArray = intArrayOf(1, 2)</span><br><span class="line">// 这种也是 unbox 的</span><br></pre></td></tr></table></figure></p>
<p>简单来说，原先在 Java 里的基本类型，类比到 Kotlin 里面，条件满足如下之一就不装箱：</p>
<ul>
<li>不可空类型。</li>
<li>使用 IntArray、FloatArray 等。</li>
</ul>
<h2 id="类型的判断和强转"><a href="#类型的判断和强转" class="headerlink" title="类型的判断和强转"></a>类型的判断和强转</h2><p>Kotlin 里同样有类似解决方案，使用 is 关键字进行「类型判断」，并且因为编译器能够进行类型推断，可以帮助我们省略强转的写法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line">    var activity: Activity = NewActivity()</span><br><span class="line">    if (activity is NewActivity) &#123;</span><br><span class="line">        // 强转由于类型推断被省略了</span><br><span class="line">        activity.action()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么能不能不进行类型判断，直接进行强转调用呢？可以使用 as 关键字：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line">    var activity: Activity = NewActivity()</span><br><span class="line">    (activity as NewActivity).action()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种写法如果强转类型操作是正确的当然没问题，但如果强转成一个错误的类型，程序就会抛出一个异常。<br>我们更希望能进行安全的强转，可以更优雅地处理强转出错的情况。<br>这一点，Kotlin 在设计上自然也考虑到了，我们可以使用 as? 来解决：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line">    var activity: Activity = NewActivity()</span><br><span class="line">    // &apos;(activity as? NewActivity)&apos; 之后是一个可空类型的对象，所以，需要使用 &apos;?.&apos; 来调用</span><br><span class="line">    (activity as? NewActivity)?.action()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它的意思就是说如果强转成功就执行之后的调用，如果强转不成功就不执行。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Markdown</title>
    <url>/2018/03/04/hello-markdown/</url>
    <content><![CDATA[<p>Markdown常用格式记录便于查阅</p>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">以此类推，注意#与文字间加空格</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h1 id="文字语法"><a href="#文字语法" class="headerlink" title="文字语法"></a>文字语法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*Italics* or _Italics_ </span><br><span class="line">**Bold** or __Bold__ </span><br><span class="line">***Bold Italics*** or ___Bold Italics___ </span><br><span class="line">~~Delete~~</span><br><span class="line">&lt;u&gt;Underline&lt;/u&gt;</span><br></pre></td></tr></table></figure>
<p><em>Italics</em> or <em>Italics</em><br><strong>Bold</strong> or <strong>Bold</strong><br><strong><em>Bold Italics</em></strong> or <strong><em>Bold Italics</em></strong><br><del>Delete</del><br><u>Underline</u></p>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Item-1</span><br><span class="line"> 1.1. Item-1-1</span><br><span class="line">    1.1.1. Item-1-1-1</span><br><span class="line">      1.1.1.1. Item-1-1-1-1</span><br><span class="line">  1.2. Item-1-2</span><br><span class="line">2. Item-2</span><br></pre></td></tr></table></figure>
<ol>
<li>Item-1<br>1.1. Item-1-1<br> 1.1.1. Item-1-1-1<br>   1.1.1.1. Item-1-1-1-1<br>1.2. Item-1-2</li>
<li>Item-2</li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Item-1</span><br><span class="line">  - Item-1-1</span><br><span class="line">    + Item-1-1-1</span><br><span class="line">      * Item-1-1-1-1</span><br><span class="line">  * Item-1-2</span><br><span class="line">+ Item-2</span><br></pre></td></tr></table></figure>
<ul>
<li>Item-1<ul>
<li>Item-1-1<ul>
<li>Item-1-1-1<ul>
<li>Item-1-1-1-1</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>Item-1-2</li>
</ul>
</li>
</ul>
<ul>
<li>Item-2</li>
</ul>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;XUECCI - Be Professtional&quot;) inline link.</span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure>
<p>This is <a href="https://xuecci.github.io/" title="XUECCI - Be Professtional" target="_blank" rel="noopener">an example</a> inline link.<br><a href="https://xuecci.github.io/" target="_blank" rel="noopener">This link</a> has no title attribute.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ref]: https://xuecci.github.io/ &quot;XUECCI - Be Professtional&quot;</span><br></pre></td></tr></table></figure>
<h1 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![Hexo Mark](hello-markdown/hexo.png &quot;Hexo Mark&quot;)</span><br></pre></td></tr></table></figure>
<p><img src="/2018/03/04/hello-markdown/hexo.png" alt="Hexo Mark" title="Hexo Mark"></p>
<h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>```<br>Code Line 1<br>Code Line 2<br>Code Line 3<br>```<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Code Line 1</span><br><span class="line">Code Line 2</span><br><span class="line">Code Line 3</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
